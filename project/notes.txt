TODO:
- Operators' associativity and level
- Notation for ProcName
- Change event to include tick
    - add event_dec
    - redo proof for skip
- Prove distinct_traces_map
- Move traces definitions and proofs into traces.v

Questions:

Ideias:
- considerar só eventos (sem distinção de entrada/saída)
- teorema: processo sem laços -> traces finito de tamanho limitado
- semântica funcional traces (com limitante no tamanho dos traces)

- wrap event in constructor to be able to define special events (skip, tau)
    |- limit constructor to take only strings
    
TODO:
- definição lógica de traces
    |- começar com um trace só, depois definir conjunto de traces
    |- equivalência
    
- se o processo não tem recursão, existe n tal que bound_traces calcula todos os traces
    P = a -> Stop
    {[], [a]}
    
- provar corretude funcional usando a definição lógica

- depois ir pra semântica operacional 

- Teorema: se um processo não tem recursão, existe um x, tal que não existem traces maiores do que x.
  (laço: lembrar que pode ser recursão mútua)

http://www.cs.swan.ac.uk/csr591/Papers/isobe05.pdf
https://link.springer.com/content/pdf/10.1007%2Fs00165-018-0453-7.pdf


TODO código:
- separar traces no arquivo de traces
- separar definições e estruturas auxiliares em outro arquivo (lista/map baseado em lista)
- criar tática pra usar inversion em um par e depois dar clear na hipótese


