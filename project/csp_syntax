Require Import Coq.Lists.ListSet.
Module CSP_Syntax.

(* Define Event type *)
Definition Event: Type := nat.


(* A set of events should be in context.
TODO: add implicit parameter *)
Inductive Proc: Type :=
  | ProcPref: Event -> Proc -> Proc (* Right associative *)
  | ProcExtChoice: Proc -> Proc -> Proc 
  | ProcRec: Proc -> Proc.
  
Notation "a --> p" := (ProcPref a p)
                      (at level 60, right associativity)
                      : type_scope.
                      
Notation "p [] q" := (ProcExtChoice p q)
                     (at level 60, right associativity)
                     : type_scope.
